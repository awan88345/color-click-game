<!DOCTYPE html>
<html>
<head>
  <title>Color Click Challenge</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background: #f0f0f0;
      margin: 0;
      padding: 20px;
      user-select: none;
    }
    #game-area {
      width: 100%;
      max-width: 500px;
      height: 400px;
      background: white;
      margin: 20px auto;
      position: relative;
      border: 2px solid #333;
      overflow: hidden;
      touch-action: manipulation;
    }
    .target {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      position: absolute;
      cursor: pointer;
      box-shadow: 0 0 5px rgba(0,0,0,0.3);
    }
    #score, #timer {
      font-size: 24px;
      margin: 10px;
      font-weight: bold;
    }
    #start-btn {
      padding: 10px 20px;
      font-size: 18px;
      cursor: pointer;
      background: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
    }
    #high-score {
      font-size: 18px;
      color: #FF5722;
    }
  </style>
</head>
<body>
  <h1>Color Click Challenge!</h1>
  <div id="score">Score: 0</div>
  <div id="high-score">High Score: 0</div>
  <div id="timer">Time: 30</div>
  <button id="start-btn">Start Game</button>
  <div id="game-area"></div>

  <audio id="click-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-arcade-game-jump-coin-216.mp3"></audio>
  <audio id="bonus-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-bonus-earned-in-video-game-2058.mp3"></audio>
  <audio id="gameover-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-arcade-retro-game-over-213.mp3"></audio>

  <script>
    const gameArea = document.getElementById('game-area');
    const scoreDisplay = document.getElementById('score');
    const highScoreDisplay = document.getElementById('high-score');
    const timerDisplay = document.getElementById('timer');
    const startBtn = document.getElementById('start-btn');

    // Sound effects
    const clickSound = document.getElementById('click-sound');
    const bonusSound = document.getElementById('bonus-sound');
    const gameoverSound = document.getElementById('gameover-sound');

    let score = 0;
    let highScore = localStorage.getItem('highScore') || 0;
    let timeLeft = 30;
    let gameInterval;
    let timerInterval;

    highScoreDisplay.textContent = `High Score: ${highScore}`;

    // Target colors and point values
    const targetTypes = [
      { color: '#FF5252', points: 1, rarity: 60 },   // Red - Common
      { color: '#4CAF50', points: 2, rarity: 30 },   // Green - Uncommon
      { color: '#2196F3', points: 3, rarity: 10 }    // Blue - Rare
    ];

    // Create a new target
    function createTarget() {
      const target = document.createElement('div');
      target.className = 'target';
      
      // Random position
      const x = Math.random() * (gameArea.offsetWidth - 50);
      const y = Math.random() * (gameArea.offsetHeight - 50);
      
      target.style.left = `${x}px`;
      target.style.top = `${y}px`;
      
      // Select random target type (weighted by rarity)
      let random = Math.random() * 100;
      let selectedType;
      for (const type of targetTypes) {
        if (random < type.rarity) {
          selectedType = type;
          break;
        }
        random -= type.rarity;
      }
      
      target.style.backgroundColor = selectedType.color;
      target.dataset.points = selectedType.points;
      
      // Speed increases as score goes up
      const speed = 1 + Math.floor(score / 10) * 0.5;
      
      // Move target randomly
      let xSpeed = (Math.random() - 0.5) * speed;
      let ySpeed = (Math.random() - 0.5) * speed;
      
      function moveTarget() {
        let currentX = parseFloat(target.style.left);
        let currentY = parseFloat(target.style.top);
        
        currentX += xSpeed;
        currentY += ySpeed;
        
        // Bounce off walls
        if (currentX <= 0 || currentX >= gameArea.offsetWidth - 50) xSpeed *= -1;
        if (currentY <= 0 || currentY >= gameArea.offsetHeight - 50) ySpeed *= -1;
        
        target.style.left = `${currentX}px`;
        target.style.top = `${currentY}px`;
      }
      
      const moveInterval = setInterval(moveTarget, 20);
      
      // Click event
      target.addEventListener('click', () => {
        const points = parseInt(target.dataset.points);
        score += points;
        scoreDisplay.textContent = `Score: ${score}`;
        
        // Play sound
        if (points >= 3) {
          bonusSound.currentTime = 0;
          bonusSound.play();
        } else {
          clickSound.currentTime = 0;
          clickSound.play();
        }
        
        clearInterval(moveInterval);
        gameArea.removeChild(target);
      });
      
      gameArea.appendChild(target);
    }
    
    // Start game
    function startGame() {
      score = 0;
      timeLeft = 30;
      scoreDisplay.textContent = `Score: ${score}`;
      timerDisplay.textContent = `Time: ${timeLeft}`;
      gameArea.innerHTML = '';
      startBtn.disabled = true;
      
      // Spawn targets every 0.8 seconds
      gameInterval = setInterval(createTarget, 800);
      
      // Countdown timer
      timerInterval = setInterval(() => {
        timeLeft--;
        timerDisplay.textContent = `Time: ${timeLeft}`;
        
        if (timeLeft <= 0) {
          clearInterval(gameInterval);
          clearInterval(timerInterval);
          startBtn.disabled = false;
          gameoverSound.play();
          
          // Update high score
          if (score > highScore) {
            highScore = score;
            localStorage.setItem('highScore', highScore);
            highScoreDisplay.textContent = `High Score: ${highScore}`;
          }
          
          setTimeout(() => {
            alert(`Game Over!\nFinal Score: ${score}\nHigh Score: ${highScore}`);
          }, 300);
        }
      }, 1000);
    }
    
    startBtn.addEventListener('click', startGame);
  </script>
</body>
</html>